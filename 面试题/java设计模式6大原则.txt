1.单一职责
  一个类,应该仅有一个引起他变化的原因。不要让一个类承担的职责过多。

2.开放封闭原则
  类,模块,函数是可以扩展的,但是不可以修改。
  对扩展开放,对修改关闭。
  需求肯定是会变化的,但是有新需求时,我们如果把类修改一遍是很头痛的。所以我们设计的程序
  面对需求的改变时，尽可能保证相对稳定,尽量通过扩展的方式去实现变化。
  依赖抽象类,而不是依赖具体的某种实现。

3.里式替换原则
  所有引用基类的地方必须能透明的使用其子类的对象。
  在程序设计时,尽量使用基类类型来对对象进行定义,而在运行时在确定具体的子类类型。
  使用里式替换原则需要注意的问题:
      子类的所有方法都必须在父类中声明,或子类必须实现父类中声明的所有方法。
      尽量把父类设计为抽象类或接口,子类去继承或者实现,运行时,子类替换父类实例,可以很方便的进行扩展。

4.依赖倒置原则
  高层模块不应该依赖底层模块,两者都应该依赖于抽象。
  抽象不应该依赖于细节,细节应该依赖于抽象。

5.迪米特原则
  一个软件实体应当尽少的与其他实体发生相互作用。
  主要思想是,一个模块发生的修改,尽量少的影响其他模块。
  主要体现在:
  类的划分尽量松耦合
  在类的结构上,每一个类都应当尽量降低成员变量和成员函数的访问权
  在对其他类的引用上,一个对象对其他对象的引用应当降到最低

6.接口隔离原则
  一个类对另一个类的依赖应该建立在最小的接口
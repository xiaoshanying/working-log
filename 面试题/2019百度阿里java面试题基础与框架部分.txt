1.String类能被继承吗?为什么?
  String类不能被继承,String类是final修饰的类。

2.String,StringBuffer,StringBuilder的区别?
  三者底层存储都是char[]
  String不可变类,对一个string变量的操作,都会生成一个新的字符串对象。
  StringBuffer可变类,线程安全,用synchronized进行同步访问
  StringBuilder不是线程安全

3.ArrayList和LinkedList有什么区别?
  ArrayList底层是数组,LinkedList底层是双向链表。
  ArrayList:读效率高,底层是数组,支持随机访问。
  LinkedList:修改,删除效率高,只改变相邻元素的引用。

4.类的实例化顺序?
  父类static final修饰的字段 ->父类静态块 ->子类静态static final字段 ->子类静态模块 ->父类构造方法 ->子类构造方法

5.用过哪些Map，都有什么区别，HashMap是线程安全的吗,并发下使用的Map是什么，他们内部原理分别是什么，比如hashcode，扩容等?
  (1)HashMap,TreeMap,LinkedHashMap,ConcurrentHashMap
  (2)HashMap:存储无序,TreeMap有序,linkedHashMap有序,ConcurrentHashMap线程安全。
  (3)并发下使用ConcurrentHashMap
  (4)1.7 HashMap在1.8时做了优化,原先entry<k,v>变成了Node。优化点主要是当hash冲突比较大时,
     出现在一个桶处链表长度很长,导致get访问是,时间复杂度变为O(n);
     1.8主要优化了这一点,在put的时候会判断链表的长度,大于设定阈值8,就会从链表转为红黄树,访问时间复杂度O(logn)
  (5)1.7 ConcurrentHashMap利用Segment。存放数据时首先需要定位到Segment,HashEntry中,value和链表都用volatile修饰,保证
     并发访问可见性。ConcurrentHashMap 采用了分段锁技术，其中 Segment 继承于 ReentrantLock。不会像 HashTable 那样不管是
     put 还是 get 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。
     每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。
     put时,通过key定位到Segment,之后在对应的 Segment 中进行具体的 put。首先第一步的时候会尝试获取锁，如果获取失败肯定就有其他线程存在竞争，
     则利用 scanAndLockForPut() 自旋获取锁。尝试自旋获取锁。如果重试的次数达到了 MAX_SCAN_RETRIES 则改为阻塞锁获取，保证能获取成功。

     get 逻辑比较简单：
     只需要将 Key 通过 Hash 之后定位到具体的 Segment ，再通过一次 Hash 定位到具体的元素上。
     由于 HashEntry 中的 value 属性是用 volatile 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值。
     ConcurrentHashMap 的 get 方法是非常高效的，因为整个过程都不需要加锁。

     1.8 ConcurrentHashMap其中抛弃了原有的 Segment 分段锁，而采用了 CAS + synchronized 来保证并发安全性.
  (6)TreeMap
一.注册中心
        1.角色:服务订阅方(C),服务提供方(P),注册中心(R)。
        2.最常见的应用场景,用于RPC的寻址,服务提供方将服务注册到注册中心,发布的内容通常是改服务的ip,port,调用方式
          (协议,序列化形式)。服务订阅方在第一次调用服务时,会通过注册中心(R)找到相应服务的ip地址列表,通过负载均衡
          算法从ip列表中取一个服务提供者的服务器进行调用。同时,订阅方会将提供方的地址列表缓存到本地,供后续使用。当
          订阅方后续再次调用服务提供方的服务时,优先使用本地缓存的地址列表,不需要再次请求注册中心。
        3.C会感知P的动态变化,当有P下线时,R会将其删除,随后C感知到新的服务列表后,不会在调用已经下线的P，当有新的P上线时,
          C也会感知到新的P。
二.SOFA金融级分布式架构。
        1.蚂蚁金服的SOFA注册中心包含4个角色,Client,SessionServer,DataServer,MetaServer.
        2.Client:提供应用接入服务注册中心的基本的API能力,应用系统通过依赖客户端JAR包,通过编程方式调用服务注册中心的服务
          订阅和服务发布能力。
        3.SessionServer:会话服务器,负责接收Client的服务发布和服务订阅请求,并作为一个中间层将写操作转发到DataServer层,
          SessionServer这一层可随业务机器数的规模的增加而扩容。
        4.DataServer:数据服务器,负责存储具体的服务数据,数据按datainfoid进行一致性Hash分片存储,支持多副本备份,保证数据
          高可用。这一层可以随服务数据量的规模的增长而扩容。
        5.MetaServer:元数据服务器,负责维护集群SessionServer和DataServer的一致列表,作为SOFA注册中心的集群内部的地址发现
          服务,在SessionServer或DataServer节点变更时可以通知到整个集群。
三.一致性协议(Paxos/Raft/2PC,一致性Hash讲解)

四.预分片
        受限需要从逻辑上将数据划分成N个大小相等的slot位置,并且slot数量后续不可更改。然后,还需要引进路由表概念,路由表负责存放
        每个节点和N个slot的映射关系,并保证尽量把所有的slot均匀的分配给每个节点。在对数据进行路由时,根据数据的key计算出hash,
        再将hash值对N取模,这个余数就是对应key的slot位置。比如 Codis 默认将数据范围分成 1024 个 slots，对于每个 key 来说，
        通过以下公式确定所属的 slotId：slotId = crc32（key） % 1024，根据 slotId 再从路由表里找到对应的节点。
五.一致性 Hash 分片机制
        在虚拟节点足够多的情况下，数据分片在每台节点上是非常分散均匀的，即使增加或减少节点的数量，还是能维持数据的平衡，并且不需要额外
        维护路由表。但是，由于“分片范围不固定（一旦节点数发生变化，就会导致分片范围变化）”的特点，导致它不适用于需要做数据多副本复制的场
        景。目前业界主要代表项目有 Memcached、Twemproxy 等。



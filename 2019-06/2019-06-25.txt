分布式锁
    把整个集群当成一个应用一样去处理,那么也就需要这把锁独立于每隔服务之外,而不是在服务里面。

    实现:
    redis分布式锁, zk分布式锁

    redis单线程,这里的单线程是指网络请求模块使用了一个线程.(所以不需要考虑并发的安全性)
    一个线程处理网络请求,其他模块仍是多线程


    zk创建临时顺序节点,来做分布式锁,临时节点断开,服务端对应znode会删除,每一个机器监听前一个临时节点


ESB企业服务总线
服务可插拔


微服务:服务之间要有契约,保证通信没问题

微服务每个服务职责单一

微服务团队管理:每个团队有产品,开发,测试

微服务架构痛点
一致性(强一致,弱一致)
高性能(容量,性能测试)
高可用(4个9或者5个9)
可扩展(可修改,迭代新功能,可插拔)
可伸缩(应用层,资源层)
安全性(防篡改,防攻击)


一致性原理:
ACID
A(原子性)
C(一致性)
I(隔离性)
D(持久性)

CAP
C(一致性,数据一致更新,所有数据变动都是同步的)
A(可用性,好的响应性能,完全的可用性是指在任何故障模型下,服务都会在有限的时间处理响应)
P(分区容错性,可靠性)

BASE
BA(基本可用)
S(软状态,状态可以有一段时间不同步)
E(最终一致,最终数据一致就可以了,而不是实时保持强一致)


一致性协议TCC

Try Confirm Cancel
应用服务 -> 提交任务给TCC管理器 -> 操作日志




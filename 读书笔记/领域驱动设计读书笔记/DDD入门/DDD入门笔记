设计不只是感官,设计就是产品的工作方式。

1.将领域专家引入到团队。
    将不怎么使用技术语言的人加入自己的团队。就向你会向他们学习一样,他们也会向你学习。

2.向领域专家提出的问题有可能暴露他们不知道的地方,你将直接帮助团队更好的理解业务,甚至确定业务。

3.如果你发现有人比你更加了解业务,找到他们,聆听他们,并向他们学习。

4.领域模型是关于某个特定领域的软件模型,通常,领域模型通过对象模型来实现,这些对象同时包含了数据和行为,并且表达了准确的业务含义。

5.领域专家将关注点放在交付业务价值上,开发者将注意力放在技术实现上。

6.解决方案很重要。

7.DDD的战略设计用于清楚的界分不同的系统和业务关注点,这样可以保护每个业务层面的服务。

8.领域的复杂性
    DDD,首先希望将它应用在最重要的业务场景下。对于那些可以轻易替换的软件来说,你是不会有所投入的。相反,值得你投入的是
    那些重要的,复杂的东西,因为这些东西将为你带来可观的回报。重要的模型命名为核心域,而那些相对次要的称为支撑子域。

9.DDD的作用是简化,而不是复杂化。
    在使用DDD时,我们应该采用最简单的方式对复杂领域进行建模,而不是使问题变得更加复杂。

10.我们应该在项目早期便对简单性和复杂性做出判断,这将为我们节约很多时间和开销。

11.贫血对象指的是缺少内在行为的领域对象。

12.通用语言和界限上下文。

13.通用语言
    团队自己创建的公用语言,团队中同时包含领域专家和软件开发人员。

14.vaccine 疫苗

15.如何掌握通用语言的一些试验性的方法
    (1).同时绘制物理模型和概念模型图,并标以名字和行为。
    (2).创建一个包含简单定义的术语表。把能想到的术语都罗列出来,包括好的和不好的,并注明好和不好的原因。在你给术语下定义时,你在
        不经意间就会创造出一些可重用的词汇。
    (3).如果不喜欢术语表,可以采用其他类型的文档,但记得把那些不正式的模型图也包含进去。
    (4).团队有些人工作在术语表,有些人工作在文档,此时,你需要找到团队的其他人员来检查你的成果,分歧肯定是有的,你应该对此有所准备。

16.界限上下文刚好能够容纳下一个独立业务领域中所使用的通用语言。

17.软件开发者不应该只热衷于技术，而是应该将眼界放的更宽。我认为不管使用什么技术,我们的目的都是提供业务价值。而如果我们采用的技术
   确实产生了业务价值,人们就没有理由拒绝我们在技术上的建议。

18.DDD业务价值
    (1).获得了一个非常有用的领域模型。
    (2).你的业务得到了更准确的定义和理解。
    (3).领域专家可以为软件设计做出贡献。
    (4).更好的用户体验。
    (5).清晰的模型边界。
    (6).更好的企业架构。
    (7).敏捷,迭代和持续建模。
    (8).使用战略和战术新工具。
        聚合,实体,值对象,领域服务,领域事件。

19.多数开发者在采用DDD时都需要转变自己思考问题的方式。作为开发者,我们都是技术思想者,但是我们也需要转变思考方式。

20.通过学习别人的经验和教训,我们可以对自己做出评判,避开潜在的错误,向着正确的方向迈进。

21.敏捷开发管理模块
    产品(product)
    产品负责人(product owner)
    团队(team)
    待定项(backlog item)
    计划发布(planned release)
    冲刺(sprint)

22.前人栽树,后人乘凉。





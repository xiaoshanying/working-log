1.为什么要做分层?
    (1)简化系统设计,不同的人可以专注做某一层的事情。
    (2)分层可以高效的复用。例如,获取用户逻辑,假如不分层,我在每一个地方都要写一次,修改的话也每个地方都要修改
       分层的话,在逻辑层将获取用户封装,对外提供服务。这样每个依赖的地方,只需要调用即可。
       分层,还可以把单独的某一层抽取出来,独立部署。
    (3)方便横向扩展。
       扩展只扩展对应层的东西,不需要对整个系统进行扩展。

2.如何来做分层?
    (1)阿里分层架构
       终端显示层      开放接口
       请求处理层(web)
       业务逻辑层(service层)
                      通用处理层
       DAO层
       数据源    外部接口或者第三方平台

    (2)不能跨层调用,层与层之间通过依赖其抽象,进行调用。
    (3)终端显示层:各端模板渲染并执行显示的层。当前主要是 Velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。
       开放接口层：将 Service 层方法封装成开放接口，同时进行网关安全控制和流量控制等。
       Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。
       Service 层：业务逻辑层。
       Manager 层：通用业务处理层。这一层主要有两个作用，其一，你可以将原先 Service 层的一些通用能力下沉到这一层，
       比如与缓存和存储交互策略，中间件的接入；其二，你也可以在这一层封装对第三方接口的调用，比如调用支付服务，调用审核服务等。
       DAO 层：数据访问层，与底层 MySQL、Oracle、HBase 等进行数据交互。
       外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。
       Manager 层，它与 Service 层的关系是：Manager 层提供原子的服务接口，Service 层负责依据业务逻辑来编排原子接口。
    (4)数据只能在相邻层之间流转。

3.分层架构的不足?
    (1)代码复杂度增加。
    (2)如果我们把每个层次独立部署，层次间通过网络来交互，那么多层的架构在性能上会有损耗。
搭建全局发号器

1.需要满足的条件
  (1)全局唯一
  (2)单调递增
  (3)最好可以标识业务

2.为什么不用UUID
  (1)UUID无序,不利于数据的写入,而且不利于排序。
     MySQL InnoDB 存储引擎使用 B+ 树存储索引数据，而主键也是一种索引。索引数据在 B+ 树中是有序排列的
     我们知道机械磁盘在完成随机的写时，需要先做“寻道”找到要写入的位置，也就是让磁头找到对应的磁道，这个过程是非常耗时的。
     而顺序写就不需要寻道，会大大提升索引的写入性能。

  (2)不具备业务意义

  (3)UUID由32个16进制数字组成,比较耗费空间。

3.snowflake算法
  Snowflake 的核心思想是将 64bit 的二进制数字分成若干部分，每一部分都存储有特定含义的数据，比如说时间戳、机器 ID、序列号等等，最终生成全局唯一的有序 ID。它的标准算法是这样的：
  41 位的时间戳大概可以支撑 pow(2,41)/1000/60/60/24/365 年，约等于 69 年，对于一个系统是足够了。
  如果你的系统部署在多个机房，那么 10 位的机器 ID 可以继续划分为 2～3 位的 IDC 标示（可以支撑 4 个或者 8 个 IDC 机房）和 7～8 位的机器 ID（支持 128-256 台机器）；
  12 位的序列号代表着每个节点每毫秒最多可以生成 4096 的 ID。

4.其他开源序列号生成
  百度开源的UidGenerator（仅支持单机部署）使用Snowflake算法，单机QPS可达600万。
  项目说明：https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md 。

  美团Leaf（分布式ID生成系统），QPS近5万。项目地址：https://tech.meituan.com/2017/04/21/mt-leaf.html

  微信序列号生成器
  文档地址：https://www.infoq.cn/article/wechat-serial-number-generator-architecture
  1. 递增但不连续的数字序列解决方案。
  2. 设计目标QPS1000万以上。
  3. 通过在递增过程中使用“步长”将每秒磁盘写入由1000万级降至1万。
  4. 设计原理相对于Snowflake更通俗易懂。
  5. 可以使用hash的负载均衡策略组建集群。
  6. 缺点：需要自己实现集群中机器增减后更新负载均衡策略的逻辑。
1.横向扩展
    采用分布式部署把流量分开,让每个服务器都承担一部分的并发和流量。
    问题:某个节点故障,如何保证整个系统的稳定。
         多个节点之间同步,如何保证信息在不同节点之间的一致性。

2.缓存
    使用缓存提高系统的性能
    主要提升系统的访问性能。在高并发的场景下就可以支撑更多用户的同时访问。
    磁盘读数据:
       普通磁盘的寻道时间是 10ms 左右,CPU 执行指令和内存寻址的时间都在是 ns（纳秒）级别，
       从千兆网卡上读取数据的时间是在μs（微秒）级别。我们通常以内存作为缓存的存储介质。

3.异步
    在某些场景下，未处理完成之前我们可以让请求先返回，在数据准备好之后再通知请求方，这样可以在单位时间内处理更多的请求。
    什么是同步?
        同步调用代表调用方要阻塞等待被调用方法中的逻辑执行完成。这种方式下，当被调用方法响应时间较长时，会造成调用方长久的阻塞，
        在高并发下会造成整体系统性能下降甚至发生雪崩。
    异步?
        异步调用恰恰相反，调用方不需要等待方法逻辑执行完成就可以返回执行其他的逻辑，在被调用方法执行完毕后再通过回调、事件通知等
        方式将结果反馈给调用方。
    场景:
        (1)12306购票时出现,正在排队。这个提示就代表着系统在异步处理我们的订票请求。
        采用异步的方式，后端处理时会把请求丢到消息队列中，同时快速响应用户，告诉用户我们正在排队处理，
        然后释放出资源来处理更多的请求。订票请求处理完之后，再通知用户订票成功或者失败。
        处理逻辑后移到异步处理程序中，Web 服务的压力小了，资源占用的少了，自然就能接收更多的用户订票请求，系统承受高并发的能力也就提升了。
        用户请求web服务 ->web服务立马返回排队,当前线程就可以释放掉,去处理其他的请求。
        整个过程:
             用户发送购票请求 -> web服务写队列,同时返回正在排队 ->队列处理程序处理请求 -> 返回结果到前端
4.纵向扩展
    通过提升硬件来提升处理能力
    在项目初期一般通过加配置应对。

5.系统演进思考
    (1)最简单的系统设计满足业务需求和流量现状，选择最熟悉的技术体系。
    (2)随着流量的增加和业务的变化修正架构中存在问题的点，如单点问题、横向扩展问题、性能无法满足需求的组件。在这个过程中，选择社区成熟的、
    团队熟悉的组件帮助我们解决问题，在社区没有合适解决方案的前提下才会自己造轮子。
    (3)当对架构的小修小补无法满足需求时，考虑重构、重写等大的调整方式以解决现有的问题。

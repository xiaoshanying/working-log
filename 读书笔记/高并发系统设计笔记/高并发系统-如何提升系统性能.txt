1.什么是高并发?
  高并发，是指运用设计手段让系统能够处理更多的用户并发请求，也就是承担更大的流量。

2.性能?
  性能反应了系统的使用体验，想象一下，同样承担每秒一万次请求的两个系统，一个响应时间是毫秒级，
  一个响应时间在秒级别，它们带给用户的体验肯定是不同的。

3.可用性?
  可用性则表示系统可以正常服务用户的时间。

4.可扩展性?
  主要是应对突发流量时,系统能在短时间内迅速完成扩容，更加平稳地承担峰值流量。

5.性能优化原则?
    (1).问题导向,优化肯定是解决了某些问题。
    (2).28原则,优化过程抓住主要的矛盾。
    (3).数据支撑,你的优化到底减少了多少响应时间,增加了多少吞吐量。
    (4).可持续优化

6.性能的度量指标?
    (1).平均值:平均值是把这段时间所有请求的响应时间数据相加，再除以总请求数。平均值可以在一定程度上反应这段时间的性能，
        但它敏感度比较差，如果这段时间有少量慢请求时，在平均值上并不能如实的反应。
    (2).最大值:就是这段时间内所有请求响应时间最长的值，但它的问题又在于过于敏感了。
    (3).分位值。
    (4)。吞吐量。每秒可以响应的数量。假如响应时间1s,那么吞吐量每秒1次。

7.响应时间多久合适?
  从用户使用体验的角度来看，
  < 200ms：接口的响应时间在 200ms 之内，用户是感觉不到延迟的，就像是瞬时发生的一样。
  200ms < n < 1s 是另外一个分界点：接口的响应时间在 1s 之内时，虽然用户可以感受到一些延迟，但却是可以接受的，
  > 1s 之后用户就会有明显等待的感觉，等待时间越长，用户的使用体验就越差。所以，健康系统的 99 分位值的响应时间通常需要控制在 200ms 之内，
  而不超过 1s 的请求占比要在 99.99% 以上。

8.高并发下的性能优化?
  假设当前系统单核,响应时间10ms,吞吐量100/s。
  (1)提升处理核心数
     提高系统的处理核心数就是增加系统的并行处理能力。
     吞吐量 = 并发进程数 / 响应时间
     问题:随着并发进程数的增加，并行的任务对于系统资源的争抢也会愈发严重。
     在某一个临界点上继续增加并发进程数，反而会造成系统性能的下降，这就是性能测试中的拐点模型。
  (2)减少单次任务响应时间
     CPU 密集型系统中，需要处理大量的 CPU 运算，那么选用更高效的算法或者减少运算次数就是这类系统重要的优化手段。
     IO 密集型系统指的是系统的大部分操作是在等待 IO 完成，这里 IO 指的是磁盘 IO 和网络 IO。

9.如何优化?
     那么找到了系统的瓶颈点，我们要如何优化呢？优化方案会随着问题的不同而不同。比方说，如果是数据库访问慢，那么就要看是不是有锁表的情况、
     是不是有全表扫描、索引加得是否合适、是否有 JOIN 操作、需不需要加缓存，等等；
     如果是网络的问题，就要看网络的参数是否有优化的空间，抓包来看是否有大量的超时重传，网卡是否有大量丢包等。


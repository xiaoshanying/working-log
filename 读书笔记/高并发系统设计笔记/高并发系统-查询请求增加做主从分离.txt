1.在4C8G上跑mysql5.7,大概可以支撑500TPS,10000QPS。

2.主从读写-主从复制
  (1)mysql主从复制依赖binlog(mysql上的所有变化以二进制形式存储在磁盘上)
  (2)原理:将 binlog 中的数据从主库传输到从库上，一般这个过程是异步的，即主库上的操作不会等待 binlog 同步的完成
  (3)过程:首先从库在连接到主节点时会创建一个 IO 线程，用以请求主库更新的 binlog，
          并且把接收到的 binlog 信息写入一个叫做 relay log 的日志文件中。

          主库也会创建一个 log dump 线程来发送 binlog 给从库。

          同时，从库还会创建一个 SQL 线程读取 relay log 中的内容，并且在从库中做回放，最终实现主从的一致性。

  (4)做了主从复制之后，我们就可以在写入时只写主库，在读数据时只读从库，这样即使写请求会锁表或者锁记录，也不会影响到读请求的执行。
  (5)在读流量比较大的情况下，我们可以部署多个从库共同承担读流量，这就是所说的“一主多从”部署方式，在你的垂直电商项目中就可以通过这
     种方式来抵御较高的并发读流量。另外，从库也可以当成一个备库来使用，以避免主库故障导致数据丢失。

  (6)是不是可以无限制的增加从库?
     不是,从库增多,连接到主库的IO线程业务变多,主库也需要建立更多的log dump线程,对于主库的资源消耗比较高。
     同时受限于主库的网络带宽，所以在实际使用中，一般一个主库最多挂 3～5 个从库。

  (7)主从复制缺陷:
     部署结构复杂
     主从同步会有延时
  (8)一般我们会把从库落后的时间作为一个重点的数据库指标做监控和报警，正常的时间是在毫秒级别，一旦落后的时间达到了秒级别就需要告警了。

3.主从读写-如何访问数据库
  利用数据库中间件
  第一类以淘宝的 TDDL（ Taobao Distributed Data Layer）为代表，以代码形式内嵌运行在应用程序内部。
  你可以把它看成是一种数据源的代理，它的配置管理着多个数据源，每个数据源对应一个数据库，可能是主库，可能是从库。
  当有一个数据库请求时，中间件将 SQL 语句发给某一个指定的数据源来处理，然后将处理结果返回。

  另一类是单独部署的代理层方案，这一类方案代表比较多，如早期阿里巴巴开源的 Cobar，基于 Cobar 开发出来的 Mycat，360 开源的 Atlas，美团开源的基于 Atlas 开发的 DBProxy 等等。
  这一类中间件部署在独立的服务器上，业务代码如同在使用单一数据库一样使用它，实际上它内部管理着很多的数据源，当有数据库请求时，
  它会对 SQL 语句做必要的改写，然后发往指定的数据源。它一般使用标准的 MySQL 通信协议，所以可以很好地支持多语言。由于它是独立部署的，
  所以也比较方便进行维护升级，比较适合有一定运维能力的大中型团队使用。它的缺陷是所有的 SQL 语句都需要跨两次网络：从应用到代理层和从
  代理层到数据源，所以在性能上会有一些损耗。




Excel相关操作
1.SUM
    =SUM(起始单元格坐标:结束单元格坐标) 统计起始和结束之间数据的和
    =SUM(K1:K12,K15,K18) 跨单元格统计 k1 + ... + k12 + k15 + k18
    =SUM(K1:K10)  k1 + ... + k10

2.单元格数据批处理
    批量给某一列数据num拼接单引号 'num'
    ="'"&单元格&"'"
    批量给某一列数据num拼接单引号加逗号 'num',
    ="'"&单元格&"'"&","

3.透视
    =vlookup(查什么,去哪里查,在目标查询区域第几列,[0,1]) 0精确查找,1模糊查找


SpringBoot异步操作
    项目中自定义线程池

        @Configuration
        @EnableAsync
        public class ExecutorConfig {

        	/** Set the ThreadPoolExecutor's core pool size. */
        	private int corePoolSize = 50;
        	/** Set the ThreadPoolExecutor's maximum pool size. */
        	private int maxPoolSize = 100;
        	/** Set the capacity for the ThreadPoolExecutor's BlockingQueue. */
        	private int queueCapacity = 1500;

        	@Bean("myTaskExecutor")
        	public Executor threadPoolTaskExecutor() {

        		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        		executor.setCorePoolSize(corePoolSize);
        		executor.setMaxPoolSize(maxPoolSize);
        		executor.setQueueCapacity(queueCapacity);
        		// rejection-policy：当pool已经达到max size的时候，如何处理新任务
        		// CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行
        		executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        		executor.setThreadNamePrefix("my-task-thread-" + executor);
                executor.setWaitForTasksToCompleteOnShutdown(true);
                executor.setAwaitTerminationSeconds(60);
        		executor.initialize();
        		return executor;
        	}

        }

    public class TestController{

        @Autowired
        private TestService testService;

        public BaseResponse test(){
            testService.testSync();
        }

    }

    public class TestService{

        //注意异步的方法没有返回值
        @Async
        public void testSync(){

        }

    }



高可用评价维度
    在业界有一套比较出名的评定网站可用性的指标，常用 N 个 9 来量化可用性，可以直接映射到网站正常运行时间的百分比上：
    描述          N个9     可用性级别     年度停机时间
    基本可用       2个9       99%         87.6小时
    较高可用       3个9       99%         8.8小时
    具备自动恢复    4个9       99%         53分钟
    极高可用       5个9       99%         5分钟

数据 + 逻辑 = 业务

微服务高可用设计手段
    服务冗余
        (1)服务多机部署,多容器部署
        (2)服务无状态化(每个服务的内容和数据都是一致的),可以随时随地的进行扩缩容。不使用本地缓存,不再服务内保存数据

    数据存储高可用
        (1)存储高可用的难点不在于怎么备份数据,而在于如何减少或者规避数据不一致对业务造成的影响。
        (2)多数据库之间同步会有延时,会造成数据不一致。
        (3)CAP中P(分区容错,网络抖动)是一定要满足的,设计架构时必须结合业务对一致性(C)和可用(A)进行取舍。
        (4)存储高可用方案的本质是将数据复制到多个存储设备中，通过数据冗余的方式来实现高可用，其复杂度主要呈现在数据复制的延迟或中断导致数据的不一致性。5
        (5)我们在设计存储架构时必须考虑到以下几个方面：
               数据怎么进行复制
               架构中每个节点的职责是什么
               数据复制出现延迟怎么处理
               当架构中节点出现错误怎么保证高可用
        (6)主从复制
            主从复制是最常见的也是最简单的存储高可用方案，例如 MySQL，Redis 等等
            其架构的优点就是简单，主机 复制 写和读，而从机只负责读操作，在读并发高时候可用扩张从库的数量减低压力，主机出现故障，读操作也可以保证读业务的顺利进行
            缺点就是客户端必须感知主从关系的存在，将不同的操作发送给不同的机器进行处理。
            而且主从复制中，从机器负责读操作，可能因为主从复制时延大，出现数据不一致性的问题。
        (7)数据主从切换
            主从切换存在两个问题:
                主机故障写操作无法进行。
                需要人工将其中一台从机器升级为主机。

            数据分片
                命名节点 + 数据节点模式
            我们在设计分片主要考虑到的点是：
            做数据分片，如何将数据映射到节点。
            数据分片的特征值，即按照数据中的哪一个属性（字段）来分片。
            数据分片的元数据的管理，如何保证元数据服务器的高性能、高可用，如果是一组服务器，如何保证强一致性

    异步化
        在每一次调用，时间越长存在超时的风险就越大，逻辑越复杂执行的步骤越多，存在失败的风险也就越大。
        如果在业务允许的情况下，用户调用只给用户必须要的结果，而不是需要同步的结果可以放在另外的地方异步去操作，
        这就减少了超时的风险也把复杂业务进行拆分减低复杂度。
        当然异步化的好处是非常多，例如削峰解耦等等，这里只是从可用的角度出发。

        异步化实现的三种方式
            (1)客户端调用服务端,服务端收到请求,创建新的线程处理业务逻辑,服务端先回应答给客户端。
            (2)服务端接到客户端请求,服务端先回应客户端,在继续处理业务逻辑。
            (3)服务端接收到请求后,服务端把信息保存在消息队列或者数据库,回应客户端,服务端业务处理
               进程再从消息队列或者数据库上读取信息处理业务逻辑。

    柔性化
        什么是柔性化？想象一个场景，我们的系统会给每个下单的用户增加他们下单金额对应的积分，当一个用户下单完毕后，我们给他增加积分的服务出现了问题。
        这个时候，我们是要取消掉这个订单还是先让订单通过，积分的问题通过重新或者报警来处理呢？
        所谓的柔性化，<就是在我们业务中允许的情况下，做不到给予用户百分百可用的，通过<降级的手段>给到用户尽可能多的服务>，
        而不是非得每次都交出去要么 100 分或 0 分的答卷。

        怎么去做柔性化，更多其实是对业务的理解和判断，柔性化更多是一种思维，需要对业务场景有深入的了解。

        在电商订单的场景中，下单，扣库存，支付是一定要执行的步骤，如果失败则订单失败。

                                         -> 加积分
        下订单  ->   扣库存    -> 支付  --  -> 发货
                                         -> 售后

        但是加积分，发货，售后是可以柔性处理，就算出错也可以通过日志报警让人工去检查，没必要为加积分损失整个下单的可用性。

    兜底/容错
        兜底可能是我们经常谈论的一种降级的方案，方案是用来实施，但是这里兜底可能更多是一种思想，更多的是一种预案，每个操作都可以犯错，我们也可以接受犯错。
        但是每个犯错我们都必须有一个兜底的预案，这个兜底的预案其实就是我们的容错或者说最大程度避免更大伤害的措施，实际上也是一个不断降级的过程。

                                     -> 其他列表
        APP首页    ->    首页列表聚合
                                     -> 调用失败(进行兜底 方案:使用之前缓存数据,使用非推荐普通商品数据,使用静态文字填充展现)

        例如我们首页请求的用户个性化推荐商品的接口，发现推荐系统出错，我们不应该去扩大（直接把异常抛给用户）或保持调用接口的错误，
        而是应该兼容调用接口的错误，做到更加柔性化。

        这时候可以选择获取之前没有失败接口的缓存数据，如果没有则可以获取通用商品不用个性化推荐，如果也没有可以读取一些静态文字进行展示。
        由于我们架构进行了分层，分层 App，网关，业务逻辑层，数据访问层等等，在组织结构也进行了划分，与之对应的是前端组，后端业务逻辑组，甚至有中台组等等。
        既然有代码和人员架构的层级划分，那么每一层都必须有这样的思想：包容下一层的错误，为上一层提供尽可能无错的服务。
        本着我们对任何一层调用服务都不可信的原则，应该对其进行容错处理，不能让异常扩散，更要保证我们这一层对上一次尽可能的作出最大努力确定的服务。

    负载均衡
        ng负载均衡故障转移
            转移流程：Nginx 根据给定好的负载均衡算法进行调度，当请求到 Tomcat1，Nginx 发现 Tomcat1 出现连接错误（节点失效），Nginx 会根据一定的机制将 Tomcat1 从调用的负载列表中清除。
            在下一次请求，Nginx 不会分配请求到有问题的 Tomcat1 上面，会将请求转移到其他的 Tomcat 之上。
            节点失效：Nginx 默认判断节点失效是以 connect refuse 和 timeout 为标准，在对某个节点进行 fails 累加，当 fails 大于 max_fails 时，该节点失效。
            节点恢复：当某个节点失败的次数大于 max_fails 时，但不超过 fail_timeout，Nginx 将不再对该节点进行探测，直到超过失效时间或者所有的节点都失效，Nginx 会对节点进行重新探测。

        zk负载均衡
            在使用 ZK 作为注册中心时，故障的发现是由 ZK 去进行发现，业务逻辑层通过 Watch 的心跳机制将自己注册到 ZK 上，网关对 ZK 进行订阅就可以知道有多少可以调用的列表。

            当业务逻辑层在重启或者被关闭时就会跟 ZK 断了心跳，ZK 会更新可调用列表。

            使用 ZK 作为负载均衡的协调器，最大的问题是 ZK 对于服务是否可用是基于 Pingpong 的方式。

            只要服务心跳存在，ZK 就认为服务是处在可用状态，但是服务如果处在假死的状态，ZK 是无从得知的。这个时候，业务逻辑服务是否真正可用只能够由网关知道。


        幂等设计:因为有重试机制,所以接口要保持幂等。
            所谓的幂等性，就是得保证在同一个业务中，一个接口被调用了多次，其导致的结果都是一样的。

    服务限流降级熔断
        先来讲讲微服务中限流/熔断的目的是什么，微服务后，系统分布式部署，系统之间通过 RPC 框架通信，整个系统发生故障的概率随着系统规模的增长而增长，
        一个小的故障经过链路的传递放大，有可能会造成更大的故障。
        限流跟高可用的关系是什么？假定我们的系统最多只能承受 500 个人的并发访问，但某个时候突然增加到 1000 个人进来，一下子就把整个系统给压垮了。
        本来还有 500 个人能享受到我们系统的服务，突然间变成了所有人都无法得到服务。
        与其让 1000 人都无法得到服务，不如就让 500 个人得到服务，拒绝掉另外 500 个人。限流是对访问的隔离，是保证了部门系统承受范围内用户的可用性。
        熔断跟高可用的关系是什么？上面说了微服务是一个错综复杂的调用链关系，假设模块 A 调用模块 B，模块 B 又调用了模块 C，模块 C 调用了模块 D。
        这个时候，模块 D 出了问题出现严重的时延，这个时候，整个调用链就会被模块 D 给拖垮。
        A 等 B，B 等 C，C 等 D，而且 A B C D 的资源被锁死得不到释放，如果流量大的话还容易引起雪崩。
        熔断，主动丢弃模块 D 的调用，并在功能上作出一些降级才能保证到我们系统的健壮性。熔断是对模块的隔离，是保证了最大功能的可用性。

    服务治理
        服务模块划分
            服务模块与服务模块之间有着千丝万缕的关系，但服务模块在业务中各有权重。
            例如订单模块可能是一家电商公司的重中之重，如果出问题将会直接影响整个公司的营收。
            而一个后台的查询服务模块可能也重要，但它的重要等级绝对是没有像订单这么重要。
            所以，在做服务治理时，<必须明确各个服务模块的重要等级>，这样才能更好的做好监控，分配好资源。
        服务级别划定(根据业务,不同公司不一样)
            一级服务    支付    订单    商品    用户      发布系统
            二级服务    消息    权限    CRM    积分       BI     评论
            三级服务    日志

        级别划分可以从服务模块的访问量和流量去预估

        往往更重要的模块也会提供更多的资源，所以不仅要对技术架构了如指掌，还要对公司各种业务形态了然于心才可以。
        服务分级不仅仅在故障界定起到重要主要，而且决定了服务监控的力度，服务监控在高可用中起到了一个保障的作用。
        它不仅可以保留服务崩溃的现场以等待日后复盘，更重要的是它可以起到一个先知，先行判断的角色，很多时候可以预先判断危险，防范于未然。

    服务监控
            服务监控是微服务治理的一个重要环节，监控系统的完善程度直接影响到我们微服务质量的好坏。
            我们的微服务在线上运行的时候有没有一套完善的监控体系能去了解到它的健康情况，对整个系统的可靠性和稳定性是非常重要，可靠性和稳定性是高可用的一个前提保证。
            服务的监控更多是对于风险的预判，在出现不可用之间就提前的发现问题，如果系统获取监控报警系统能自我修复则可以将错误消灭在无形，如果系统发现报警无法自我修复则可以通知人员提早进行接入。

    









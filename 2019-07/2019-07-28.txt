java并发 compareAndSet
    AtomicBoolean 可用在应用程序中（如以原子方式更新的标志），但不能用于替换 Boolean。即能够保证在高并发的情况下只有一个线程能够访问这个属性值。
    public final boolean compareAndSet(boolean expect, boolean update) {
            int e = expect ? 1 : 0;
            int u = update ? 1 : 0;
            return unsafe.compareAndSwapInt(this, valueOffset, e, u);
        }

    一般情况下，我们使用 AtomicBoolean 高效并发处理 “只初始化一次” 的功能要求：
    private static AtomicBoolean initialized = new AtomicBoolean(false);
        public void init()
        {
           if( initialized.compareAndSet(false, true) )//如果为false，更新为true
           {
               // 这里放置初始化代码....
           }
        }

    如果没有AtomicBoolean，我们可以使用volatile做如下操作：

    public static volatile initialized = false;
        public void init()
        {
            if( initialized == false ){
                initialized = true;
                // 这里初始化代码....
            }
        }

    public class AtomicExample7Boolean {
        private static AtomicBoolean isHappened = new AtomicBoolean(false);
        public static int clientTotal = 5000;
        public static int threadTotal = 200;

        public static void main(String[] args) throws InterruptedException {
            ExecutorService executorService = Executors.newCachedThreadPool();
            final Semaphore semaphore = new Semaphore(threadTotal);
            final CountDownLatch countDownLatch = new CountDownLatch(clientTotal);
            for (int i = 0; i < clientTotal; i++) {
                executorService.execute(() -> {
                    try {
                        semaphore.acquire();
                        test();
                        semaphore.release();
                    } catch (Exception e) {
                        log.error("exception", e);
                    }
                    countDownLatch.countDown();
                });
            }
            countDownLatch.await();
            executorService.shutdown();
            log.info("isHappened:{}", isHappened.get());
        }

        //测试并发情况
        public static void test() {
            if (isHappened.compareAndSet(false, true)) {
                log.info("execute");
            }
        }
    }

CAS操作——Compare & Set，或是 Compare & Swap

    看一看内存*reg里的值是不是old val，如果是的话，则对其赋值newVal。
    int compare_and_swap (int* reg, int oldVal, int newVal)
    {
      int old_reg_val = *reg;
      if(old_reg_val == oldVal)
         *reg = newVal;
      return old_reg_val;
    }

这个操作可以变种为返回bool值的形式（返回 bool值的好处在于，可以调用者知道有没有更新成功）：
    bool compare_and_swap (int *accum, int *dest, int newval)
    {
      if( *accum == *dest ) {
          *dest = newval;
          return true;
      }
      return false;
    }

CAS的ABA问题
    所谓ABA（见维基百科的ABA词条），问题基本是这个样子：
    进程P1在共享变量中读到值为A
    P1被抢占了，进程P2执行
    P2把共享变量里的值从A改成了B，再改回到A，此时被P1抢占。
    P1回来看到共享变量里的值没有被改变，于是继续执行。

    解决方案,双重检查,加版本号,每次替换之后加版本号














